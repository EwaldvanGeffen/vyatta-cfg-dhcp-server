#!/usr/bin/perl

use strict;
use lib "/opt/vyatta/share/perl5/";


use Getopt::Long;
my $out;
my $change_dir;
my $modify_dir;
my $init;
GetOptions("out=s" => \$out, "change_dir=s" => \$change_dir, "modify_dir=s" => \$modify_dir, "init=s" => \$init);

my $error = 0;
my $genout;

$genout .= "# generated by $0\n\n";

use NetAddr::IP;  # This library is available via libnetaddr-ip-perl.deb
use VyattaConfig;
my $vcDHCP = new VyattaConfig();
my $vcIE = new VyattaConfig();

if ($change_dir ne '') {
	$vcDHCP->{_changes_only_dir_base} = $change_dir;
	$vcIE->{_changes_only_dir_base} = $change_dir;
}
if ($modify_dir ne '') {
	$vcDHCP->{_new_config_dir_base} = $modify_dir;
	$vcIE->{_new_config_dir_base} = $modify_dir;
}

$genout .=  "# using 'changes only' directory:   $vcDHCP->{_changes_only_dir_base}\n";
$genout .=  "# using 'new config' directory:     $vcDHCP->{_new_config_dir_base}\n\n";

my @names;

my $disabled = 0;

$vcDHCP->setLevel('service dhcp-server');
if ($vcDHCP->exists('.')) {

	my $disabled_val = $vcDHCP->returnValue('disabled');
	if (defined($disabled_val) && $disabled_val eq 'true') {
		my $msg = "Warning:  DHCP server will be deactivated because 'service dhcp-server disabled' is set to 'true'.\n";
		print stderr $msg;
		$disabled = 1;
		$genout .=  "\n";
		$genout .=  '# ' . $msg;
		$genout .=  "\n";
	}

	# The ISC DHCPD server version V3.0.3 refuses to start without the 'ddns-update-style' parameter.
	# The book 'The DHCP Handbook' ISBN 0-672-32327-3 recommends the 'interim' setting on page 403.
	$genout .=  "ddns-update-style interim;\n\n";
	
	$vcDHCP->setLevel('service dhcp-server shared-network-name');
	$vcIE->setLevel('interfaces ethernet');
	
	my $totalSubnetsLeased = 0;
	my $totalSubnetsMatched = 0;
	
	@names = $vcDHCP->listNodes();
	if (@names == 0) {
		print stderr "DHCP server configuration error.  No DHCP shared networks configured.  At least one DHCP shared network must be configured.\n";
		$error = 1;
	} else {
		foreach my $name (@names) {

			$genout .=  "shared-network $name {\n";

			my @subnets = $vcDHCP->listNodes("$name subnet");
			if (@subnets == 0) {
				print stderr "DHCP server configuration error.  No DHCP lease subnets configured for shared network name '$name'.  At least one DHCP lease subnet must be configured for each shared network.\n";
				$error = 1;
			} else {
				foreach my $subnet (@subnets) {

					my $naipNetwork = new NetAddr::IP("$subnet");
					if (defined($naipNetwork)) {

						$totalSubnetsLeased++;

						my @eths = $vcIE->listNodes();
						foreach my $eth (@eths) {
							my @addresses = $vcIE->returnValues("$eth address");

							foreach my $address (@addresses) {
								if (doCheckIfAddressPLInsideNetwork($address, $naipNetwork)) {
									$totalSubnetsMatched++;
								}
							}

							my @vifs = $vcIE->listNodes("$eth vif");
							foreach my $vif (@vifs) {
								my @vif_addresses = $vcIE->returnValues("$eth vif $vif address");
								foreach my $vif_address (@vif_addresses) {
									if (doCheckIfAddressPLInsideNetwork($vif_address, $naipNetwork)) {
										$totalSubnetsMatched++;
									}
								}
							}
						}


						my $sub = $naipNetwork->network()->addr();
						my $netmask = $naipNetwork->mask();
	
						$genout .=  "\tsubnet $sub netmask $netmask {\n";
	
						my $authoritative = $vcDHCP->returnValue("$name subnet $subnet authoritative");
						if ($authoritative eq 'enable') {
							$genout .=  "\t\tauthoritative;\n";
						} else {
							$genout .=  "\t\tnot authoritative;\n";
						}
	
						my @dns_servers = $vcDHCP->returnValues("$name subnet $subnet dns-server");
						if (@dns_servers > 0) {
							$genout .=  "\t\toption domain-name-servers ";
							my $num = 0;
							foreach my $dns_server (@dns_servers) {
								if ($dns_server ne '') {
									if ($num > 0) {
										$genout .=  ', ';
									}
									$genout .=  "$dns_server";
									$num++;
								}
							}
							$genout .=  ";\n";
						}
	
						my $default_router = $vcDHCP->returnValue("$name subnet $subnet default-router");
						if ($default_router ne '') {
							$genout .=  "\t\toption routers $default_router;\n";
						}
	
						my $server_identifier = $vcDHCP->returnValue("$name subnet $subnet server-identifier");
                                                if ($server_identifier ne '') {
                                                        $genout .=  "\t\toption dhcp-server-identifier $server_identifier;\n";
                                                }

						my $domain_name = $vcDHCP->returnValue("$name subnet $subnet domain-name");
						if ($domain_name ne '') {
							$genout .=  "\t\toption domain-name \"$domain_name\";\n";
						}
	
						my $lease = $vcDHCP->returnValue("$name subnet $subnet lease");
						if ($lease ne '') {
							$genout .=  "\t\tdefault-lease-time $lease;\n";
							$genout .=  "\t\tmax-lease-time $lease;\n";
						}
	
						my $client_prefix_length = $vcDHCP->returnValue("$name subnet $subnet client-prefix-length");
						if ($client_prefix_length ne '') {
							my $naip2 = new NetAddr::IP("255.255.255.255/$client_prefix_length");
							my $client_subnet_mask = $naip2->network()->addr();
							$genout .=  "\t\toption subnet-mask $client_subnet_mask;\n";
						}
	
						my $range_conflict_error = 1;           #prevents showing range conflict errors if basic errors for start-stop occur as well
                                                my $ranges_stop_count = 0;
                                                my @ranges_stop;
						my @ranges = $vcDHCP->listNodes("$name subnet $subnet start");
						foreach my $start (@ranges) {
							my $naipStart = new NetAddr::IP($start);
							if (!$naipStart->within($naipNetwork)) {
								print stderr "DHCP server configuration error.  Start DHCP lease IP '$start' is outside of the DHCP lease network '$subnet' under shared network '$name'.\n";
								$error = 1;
								$range_conflict_error = 0;
							}
	
							my $stop = $vcDHCP->returnValue("$name subnet $subnet start $start stop");
							if (defined $stop){
							    my $naipStop = new NetAddr::IP($stop);
							    if (!$naipStop->within($naipNetwork)) {
								print stderr "DHCP server configuration error.  Stop DHCP lease IP '$stop' is outside of the DHCP lease network '$subnet' under shared network '$name'.\n";
								$error = 1;
								$range_conflict_error = 0;
							    }
							    if ($naipStop < $naipStart) {
			                                        print stderr "DHCP server configuration error. Stop DHCP lease IP '$stop' should be an address equal to or later than the Start DHCP lease IP '$start'\n";
                                                                $error = 1;
								$range_conflict_error = 0;
                                   			    }
                                                            $ranges_stop[$ranges_stop_count] = $stop;
                                                            $ranges_stop_count++;
							    $genout .=  "\t\trange $start $stop;\n";
							} else {
								print stderr "DHCP server configuration error. Stop DHCP lease IP not defined for Start DHCP lease IP '$start'\n";
								$error = 1;		
								$range_conflict_error = 0;				
							}
						}


                                                if ($range_conflict_error){
                                                    my $start_count = 0;
                                                    my $stop_count = 0;
                                                    my @naip_conflict_start;
                                                    my @naip_conflict_stop;
                                                    foreach my $conflict_start (@ranges){
                                                            $naip_conflict_start[$start_count] = new NetAddr::IP($conflict_start);
                                                            $start_count++;
                                                    }
                                                    foreach my $conflict_stop (@ranges_stop){
                                                            $naip_conflict_stop[$stop_count] = new NetAddr::IP($conflict_stop);
                                                            $stop_count++;
                                                    }
                                                    my $range_count = scalar(@ranges)-1;
                                                    my @zero_to_ranges = (0 .. $range_count);
                                                    for my $i (@zero_to_ranges){
                                                        for my $j (@zero_to_ranges){
                                                            if ($i == $j){
                                                                next;
                                                            } else {
                                                                   if ( ($naip_conflict_start[$j] <= $naip_conflict_start[$i]) and ($naip_conflict_start[$i] <= $naip_conflict_stop[$j]) ){
                                                                       print stderr "Conflicting DHCP lease ranges: Start IP '$ranges[$i]' lies in DHCP lease range '$ranges[$j]'-'$ranges_stop[$j]'\n";
                                                                       $error = 1;
                                                                   } elsif ( ($naip_conflict_start[$j] <= $naip_conflict_stop[$i]) and ($naip_conflict_stop[$i] <= $naip_conflict_stop[$j]) ) {
                                                                            print stderr "Conflicting DHCP lease ranges: Stop IP '$ranges_stop[$i]' lies in DHCP lease range '$ranges[$j]'-'$ranges_stop[$j]'\n";
                                                                            $error = 1;
                                                                     }
                                                               }
                                                         }
                                                     }
                                                } 



						my @static_mapping = $vcDHCP->listNodes("$name subnet $subnet static-mapping");
						foreach my $static_mapping (@static_mapping) {
							my $ip_address = $vcDHCP->returnValue("$name subnet $subnet static-mapping $static_mapping ip-address");
							if (!defined($ip_address) || $ip_address eq '') {
								print stderr "DHCP server configuration error.  No static DHCP lease IP address specified for static mapping '$static_mapping' under shared network name '$name'.\n";
								$error = 1;
							} else {
								my $naipIP = new NetAddr::IP($ip_address);
								if (!$naipIP->within($naipNetwork)) {
									print stderr "DHCP server configuration error.  Static DHCP lease IP '$ip_address' under static mapping '$static_mapping' under shared network name '$name' is outside of the DHCP lease network '$subnet'.\n";
									$error = 1;
								}
							}
		
							my $mac_address = $vcDHCP->returnValue("$name subnet $subnet static-mapping $static_mapping mac-address");
							if (!defined($mac_address) || $mac_address eq '') {
								print stderr "DHCP server configuration error.  No static DHCP lease mac address specified for static mapping '$static_mapping' under shared network name '$name'.\n";
								$error = 1;
							}
							if (defined($ip_address) && $ip_address ne '' && defined($mac_address) && $mac_address ne '') {
								$genout .=  "\t\thost $ip_address {\n";
								$genout .=  "\t\t\tfixed-address $ip_address;\n";
								$genout .=  "\t\t\thardware ethernet $mac_address;\n";
								$genout .=  "\t\t}\n";
							}
						}
	
						my @wins_servers = $vcDHCP->returnValues("$name subnet $subnet wins-server");
						if (@wins_servers > 0) {
							$genout .=  "\t\toption netbios-name-servers ";
							my $num_netbios = 0;
							foreach my $wins_server (@wins_servers) {
								if ($wins_server ne '') {
									if ($num_netbios > 0) {
										$genout .=  ', ';
									}
									$genout .=  "$wins_server";
									$num_netbios++;
								}
							}
							$genout .=  ";\n";
						}
						$genout .=  "\t}\n";
					}
				}
			}
			$genout .=  "}\n";
		}
	}
	
	if ($totalSubnetsLeased > 0 && $totalSubnetsMatched == 0) {
		print stderr "DHCP server configuration error.  None of the DHCP lease subnets attempted in commit are inside any of the ethernet interface subnets configured on this system.  At least one DHCP lease subnet must be inside an ethernet interface subnet.\n";
		$error = 1;
	}
	
	if ($error) {
		print stderr "DHCP server configuration commit aborted due to error(s).\n";
		exit(1);
	}
}

my $output;
if ($out ne '') {
	open $output, ">$out";
	select $output;
}
print $genout;
if ($output ne undef) {
	close $output;
}

if ($init ne '') {
	if (@names == 0 || $disabled) {
		exec "$init stop";
	} else {
		exec "$init restart";
	}
}


sub doCheckIfAddressPLInsideNetwork {
	my ($address, $naipNetwork) = @_;

	if (!defined($address) || !defined($naipNetwork)) {
		return 0;
	}

	my $naipSM = new NetAddr::IP($address);
	if (defined($naipSM)) {

		my $subnetIA = $naipSM->network()->addr();
		my $naipIA = new NetAddr::IP($subnetIA, $naipSM->masklen());

		if (defined($naipIA) && $naipNetwork->within($naipIA)) {
			return 1;
		}
	}

	return 0;
}

